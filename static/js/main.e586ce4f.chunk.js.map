{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcon","temp_celsius","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","id","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e586ce4f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = (props)=>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"cards pt-4\">\r\n                <h1>{props.city}</h1>    \r\n                 <h5 className=\"py-4\">\r\n                     <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n                 </h5>\r\n\r\n{props.temp_celsius ?(<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>):null}\r\n\r\n                 {minmaxTemp(props.temp_min,props.temp_max)}\r\n\r\n                 <h4 className=\"py-3\">{props.description}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nfunction minmaxTemp(min,max){\r\n       if(min && max){\r\n           return(\r\n            <h3>\r\n            <span className=\"px-4\">{min}&deg;</span>\r\n            <span className=\"px-4\">{max}&deg;</span>\r\n         </h3>\r\n           );\r\n       }\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport \"./form.style.css\";\r\n\r\nconst Form = props =>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div>{props.error ? error():null}</div>\r\n            <form onSubmit={props.loadweather}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2 \" >\r\n                 <input type=\"text\"  className=\"form-control\" name=\"city\" autoComplete=\"off\" placeholder=\"City\"/>   \r\n              </div>\r\n                <div className=\"col-md-3\">  \r\n                <input type=\"text\"  className=\"form-control\" name=\"country\" autoComplete=\"off\" placeholder=\"Country\"/>   \r\n                </div>\r\n                <div id=\"button\"className=\"col-md-3 mt-md-0 text-md-left\"> \r\n                <button className=\"btn btn-warning\">Get Weather</button>\r\n                 </div>\r\n\r\n            </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please enter City and Country\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\nimport \"./App.css\";\n//import \"weather-icons/css/weather-icons.css\";\n//import \"bootstrap/dist/css/bootstrap.min.css\";\nimport Weather from './app_component/weather.component';\nimport Form from \"./app_component/form.component\";\n\n\nconst API_key=\"e275616561da470cd3484c7b1252225e\";\n\nclass App extends React.Component{\nconstructor(){\n  super();\n  this.state={\n    city:undefined,\n    country:undefined,\n    icon:undefined,\n    main:undefined,\n    celsius:undefined,\n    temp_max:undefined,\n    temp_min:undefined,\n    description:\"\",\n    error:false\n  };\n\n  this.weatherIcon={\n    Thunderstorm:\"wi-thunderstorm\",\n    Drizzle:\"wi-sleet\",\n    Rain:\"wi-storm-showers\",\n    Snow:\"wi-snow\",\n    Atmosphere:\"wi-fog\",\n    Clear:\"wi-day-sunny\",\n    Clouds:\"wi-day-fog\"\n  };\n}\n\n\ncalCelsius(temp){\n  let cell=Math.floor(temp-273.15);\n  return cell;\n}\n\nget_WeatherIcon(icons,rangeId){\n  switch(true){\n    case rangeId >= 200 && rangeId <= 232:\n      this.setState({icon:this.weatherIcon.Thunderstorm});\n      break;\n    case rangeId >= 300 && rangeId <= 321:\n      this.setState({icon:this.weatherIcon.Drizzle});\n      break;\n    case rangeId >= 500 && rangeId <= 531:\n      this.setState({icon:this.weatherIcon.Rain});\n      break;\n    case rangeId >= 600 && rangeId <= 622:\n      this.setState({icon:this.weatherIcon.Snow});\n      break;\n    case rangeId >= 701 && rangeId <=781:\n      this.setState({icon:this.weatherIcon.Atmosphere});\n      break;\n    case rangeId === 800:\n      this.setState({icon:this.weatherIcon.Clear});\n      break;\n    case rangeId >= 801 && rangeId <=804:\n      this.setState({icon:this.weatherIcon.Clouds});\n      break;     \n      default:\n      this.setState({icon:this.weatherIcon.Clouds});\n               \n  }\n}\n\n\ngetWeather=async e =>{\n\ne.preventDefault();\n\nconst city = e.target.elements.city.value;\nconst country = e.target.elements.country.value;\n\n if(city && country)\n{ const api_call = await fetch(\n  `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n  \n    const response = await api_call.json();\n  \n    console.log(response);\n  \n    this.setState({\n      city:`${response.name},${response.sys.country}`,\n      celsius:this.calCelsius(response.main.temp),\n      temp_max:this.calCelsius(response.main.temp_max),\n      temp_min:this.calCelsius(response.main.temp_min),\n      description:response.weather[0].main,\n      error:false\n  \n    });\n    this.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\n  }\n  else{\n    this.setState({error:true});\n  }\n};\n\n  render(){\n    return(\n      <div className=\"App\">\n      <Form loadweather={this.getWeather} error={this.state.error}/>\n      <Weather \n      city = {this.state.city} \n      country={this.state.country}\n       temp_celsius={this.state.celsius}\n       temp_max={this.state.temp_max}\n       temp_min={this.state.temp_min}\n       description={this.state.description}\n       weatherIcon={this.state.icon}\n       />\n    </div>\n     );\n  }\n}\n\nexport default App;\n ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}